#include "setting.h"

#include <QCheckBox>
#include <QComboBox>
#include <QFormLayout>
#include <QGroupBox>
#include <QHBoxLayout>
#include <QPushButton>
#include <QSpinBox>

/**
* TODO: These codes are generated by Deepseek! Do It Yourself later!
*/

SettingsDialog::SettingsDialog(QWidget *parent) : QDialog(parent) {
    setWindowTitle(tr("设置"));
    setMinimumSize(600, 400);

    QHBoxLayout *mainLayout = new QHBoxLayout(this);
    createNavigationList();
    mainLayout->addWidget(navList, 1);
    createPages();
    mainLayout->addWidget(stackedWidget, 3);

    connect(navList, &QListWidget::currentRowChanged, stackedWidget, &QStackedWidget::setCurrentIndex);
    navList->setCurrentRow(0);
}

void SettingsDialog::createNavigationList() {
    navList = new QListWidget(this);
    navList->setMaximumWidth(150);
    navList->setSpacing(5);

    QListWidgetItem *generalItem = new QListWidgetItem(tr("常规设置"));
    generalItem->setIcon(QIcon(":/icons/settings.png"));
    navList->addItem(generalItem);

    QListWidgetItem *appearanceItem = new QListWidgetItem(tr("外观"));
    appearanceItem->setIcon(QIcon(":/icons/appearance.png"));
    navList->addItem(appearanceItem);

    QListWidgetItem *networkItem = new QListWidgetItem(tr("网络"));
    networkItem->setIcon(QIcon(":/icons/network.png"));
    navList->addItem(networkItem);

    QListWidgetItem *advancedItem = new QListWidgetItem(tr("高级"));
    advancedItem->setIcon(QIcon(":/icons/advanced.png"));
    navList->addItem(advancedItem);
}

void SettingsDialog::createPages() {
    stackedWidget = new QStackedWidget(this);

    // 添加各设置页面
    stackedWidget->addWidget(createGeneralPage());
    stackedWidget->addWidget(createAppearancePage());
    stackedWidget->addWidget(createNetworkPage());
    stackedWidget->addWidget(createAdvancedPage());
}

QWidget *SettingsDialog::createGeneralPage() {
    QWidget *page = new QWidget();
    QVBoxLayout *layout = new QVBoxLayout(page);

    QGroupBox *startupGroup = new QGroupBox(tr("启动选项"));
    QVBoxLayout *startupLayout = new QVBoxLayout();
    QCheckBox *autoStartCheck = new QCheckBox(tr("启动时自动运行"));
    QCheckBox *showSplashCheck = new QCheckBox(tr("显示启动画面"));
    startupLayout->addWidget(autoStartCheck);
    startupLayout->addWidget(showSplashCheck);
    startupGroup->setLayout(startupLayout);

    QGroupBox *updateGroup = new QGroupBox(tr("更新选项"));
    QVBoxLayout *updateLayout = new QVBoxLayout();
    QCheckBox *autoUpdateCheck = new QCheckBox(tr("自动检查更新"));
    QComboBox *updateFrequency = new QComboBox();
    updateFrequency->addItems({tr("每天"), tr("每周"), tr("每月")});
    updateLayout->addWidget(autoUpdateCheck);
    updateLayout->addWidget(new QLabel(tr("检查频率:")));
    updateLayout->addWidget(updateFrequency);
    updateGroup->setLayout(updateLayout);

    layout->addWidget(startupGroup);
    layout->addWidget(updateGroup);
    layout->addStretch();

    return page;
}

QWidget *SettingsDialog::createAppearancePage() {
    QWidget *page = new QWidget();
    QVBoxLayout *layout = new QVBoxLayout(page);

    QGroupBox *themeGroup = new QGroupBox(tr("主题"));
    QVBoxLayout *themeLayout = new QVBoxLayout();
    QComboBox *themeCombo = new QComboBox();
    themeCombo->addItems({tr("浅色"), tr("深色"), tr("系统默认")});
    themeLayout->addWidget(new QLabel(tr("选择主题:")));
    themeLayout->addWidget(themeCombo);
    themeGroup->setLayout(themeLayout);

    QGroupBox *fontGroup = new QGroupBox(tr("字体"));
    QVBoxLayout *fontLayout = new QVBoxLayout();
    QComboBox *fontCombo = new QComboBox();
    fontCombo->addItems({"Arial", "Times New Roman", "Courier New", "Verdana"});
    QSpinBox *fontSizeSpin = new QSpinBox();
    fontSizeSpin->setRange(8, 24);
    fontLayout->addWidget(new QLabel(tr("字体:")));
    fontLayout->addWidget(fontCombo);
    fontLayout->addWidget(new QLabel(tr("大小:")));
    fontLayout->addWidget(fontSizeSpin);
    fontGroup->setLayout(fontLayout);

    layout->addWidget(themeGroup);
    layout->addWidget(fontGroup);
    layout->addStretch();

    return page;
}

QWidget *SettingsDialog::createNetworkPage() {
    QWidget *page = new QWidget();
    QVBoxLayout *layout = new QVBoxLayout(page);

    QGroupBox *proxyGroup = new QGroupBox(tr("代理设置"));
    QFormLayout *proxyLayout = new QFormLayout();
    QCheckBox *useProxyCheck = new QCheckBox(tr("使用代理服务器"));
    QLineEdit *proxyHostEdit = new QLineEdit();
    QSpinBox *proxyPortSpin = new QSpinBox();
    proxyPortSpin->setRange(1, 65535);
    proxyLayout->addRow(useProxyCheck);
    proxyLayout->addRow(tr("主机:"), proxyHostEdit);
    proxyLayout->addRow(tr("端口:"), proxyPortSpin);
    proxyGroup->setLayout(proxyLayout);

    layout->addWidget(proxyGroup);
    layout->addStretch();

    return page;
}

QWidget *SettingsDialog::createAdvancedPage() {
    QWidget *page = new QWidget();
    QVBoxLayout *layout = new QVBoxLayout(page);

    QGroupBox *debugGroup = new QGroupBox(tr("调试选项"));
    QVBoxLayout *debugLayout = new QVBoxLayout();
    QCheckBox *enableLogCheck = new QCheckBox(tr("启用日志记录"));
    QCheckBox *verboseLogCheck = new QCheckBox(tr("详细日志"));
    debugLayout->addWidget(enableLogCheck);
    debugLayout->addWidget(verboseLogCheck);
    debugGroup->setLayout(debugLayout);

    QGroupBox *resetGroup = new QGroupBox(tr("重置选项"));
    QVBoxLayout *resetLayout = new QVBoxLayout();
    QPushButton *resetSettingsBtn = new QPushButton(tr("恢复默认设置"));
    resetLayout->addWidget(resetSettingsBtn);
    resetGroup->setLayout(resetLayout);

    layout->addWidget(debugGroup);
    layout->addWidget(resetGroup);
    layout->addStretch();

    return page;
}
